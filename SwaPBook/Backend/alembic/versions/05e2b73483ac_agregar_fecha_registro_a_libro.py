"""agregar fecha registro a libro

Revision ID: 05e2b73483ac
Revises: 04bbd7b2d62a
Create Date: 2025-06-03 19:03:47.507131

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '05e2b73483ac'
down_revision: Union[str, None] = '04bbd7b2d62a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('libros',
    sa.Column('idLibro', sa.Integer(), nullable=False),
    sa.Column('titulo', sa.String(length=100), nullable=False),
    sa.Column('autor', sa.String(length=100), nullable=False),
    sa.Column('descripcion', sa.Text(), nullable=True),
    sa.Column('fechaRegistro', sa.DateTime(), nullable=True),
    sa.Column('estado', sa.Enum('disponible', 'intercambio', name='estadolibroenum'), nullable=False),
    sa.Column('foto', sa.String(length=255), nullable=True),
    sa.Column('idEstudiante', sa.Integer(), nullable=False),
    sa.Column('idCategoria', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['idCategoria'], ['categorias.idCategoria'], ),
    sa.ForeignKeyConstraint(['idEstudiante'], ['estudiantes.idEstudiante'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idLibro')
    )
    op.create_index(op.f('ix_libros_idLibro'), 'libros', ['idLibro'], unique=False)
    op.drop_index('ix_intercambios_idIntercambio', table_name='intercambios')
    op.drop_table('intercambios')
    op.drop_table('cambios_correo_pendiente')
    op.create_foreign_key(None, 'solicitudes', 'libros', ['libroOfrecido'], ['idLibro'])
    op.create_foreign_key(None, 'solicitudes', 'libros', ['libroSolicitado'], ['idLibro'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'solicitudes', type_='foreignkey')
    op.drop_constraint(None, 'solicitudes', type_='foreignkey')
    op.create_table('cambios_correo_pendiente',
    sa.Column('idCambio', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('idEstudiante', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nuevoCorreo', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fechaSolicitud', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expiraEn', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('usado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['idEstudiante'], ['estudiantes.idEstudiante'], name='cambios_correo_pendiente_idEstudiante_fkey'),
    sa.PrimaryKeyConstraint('idCambio', name='cambios_correo_pendiente_pkey')
    )
    op.create_table('intercambios',
    sa.Column('idIntercambio', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('idSolicitud', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idEstudiante', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idEstudianteReceptor', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idLibroOfrecido', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idLibroSolicitado', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fechaEncuentro', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('horaEncuentro', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lugarEncuentro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado', postgresql.ENUM('en_proceso', 'finalizado', 'cancelado', name='estadointercambioenum'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['idEstudiante'], ['estudiantes.idEstudiante'], name='intercambios_idEstudiante_fkey'),
    sa.ForeignKeyConstraint(['idEstudianteReceptor'], ['estudiantes.idEstudiante'], name='intercambios_idEstudianteReceptor_fkey'),
    sa.ForeignKeyConstraint(['idSolicitud'], ['solicitudes.idSolicitud'], name='intercambios_idSolicitud_fkey'),
    sa.PrimaryKeyConstraint('idIntercambio', name='intercambios_pkey')
    )
    op.create_index('ix_intercambios_idIntercambio', 'intercambios', ['idIntercambio'], unique=False)
    op.drop_index(op.f('ix_libros_idLibro'), table_name='libros')
    op.drop_table('libros')
    # ### end Alembic commands ###
