"""Agregar Enum para rol en estudiantes

Revision ID: ef86032ec05c
Revises: f8c0f79ed1a6
Create Date: 2025-06-06 15:11:02.090818

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ef86032ec05c'
down_revision: Union[str, None] = 'f8c0f79ed1a6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_intercambios_idIntercambio', table_name='intercambios')
    op.drop_table('intercambios')
    op.drop_table('cambios_correo_pendiente')
    op.alter_column('estudiantes', 'rol',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('estudiante', 'administrador', name='rolenum'),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('estudiantes', 'rol',
               existing_type=sa.Enum('estudiante', 'administrador', name='rolenum'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.create_table('cambios_correo_pendiente',
    sa.Column('idCambio', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('idEstudiante', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nuevoCorreo', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('fechaSolicitud', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expiraEn', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('usado', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['idEstudiante'], ['estudiantes.idEstudiante'], name='cambios_correo_pendiente_idEstudiante_fkey'),
    sa.PrimaryKeyConstraint('idCambio', name='cambios_correo_pendiente_pkey')
    )
    op.create_table('intercambios',
    sa.Column('idIntercambio', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('idSolicitud', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idEstudiante', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idEstudianteReceptor', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idLibroOfrecido', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('idLibroSolicitado', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fechaEncuentro', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('horaEncuentro', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lugarEncuentro', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('estado', postgresql.ENUM('en_proceso', 'finalizado', 'cancelado', name='estadointercambioenum'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['idEstudiante'], ['estudiantes.idEstudiante'], name='intercambios_idEstudiante_fkey'),
    sa.ForeignKeyConstraint(['idEstudianteReceptor'], ['estudiantes.idEstudiante'], name='intercambios_idEstudianteReceptor_fkey'),
    sa.ForeignKeyConstraint(['idLibroOfrecido'], ['libros.idLibro'], name='intercambios_idLibroOfrecido_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['idLibroSolicitado'], ['libros.idLibro'], name='intercambios_idLibroSolicitado_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['idSolicitud'], ['solicitudes.idSolicitud'], name='intercambios_idSolicitud_fkey'),
    sa.PrimaryKeyConstraint('idIntercambio', name='intercambios_pkey')
    )
    op.create_index('ix_intercambios_idIntercambio', 'intercambios', ['idIntercambio'], unique=False)
    # ### end Alembic commands ###
